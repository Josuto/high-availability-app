name: Cleanup AWS Resources

on:
  workflow_dispatch: # Manual trigger

env:
  TERRAFORM_VERSION: 1.5.7 # Update to version when needed
  AWS_REGION: eu-west-1

jobs:
  destroy-routing:
    name: Destroy all routing-related resources
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform on the routing directory
        run: terraform init
        working-directory: infra/deployment/prod/routing

      - name: Destroy Resources on the routing directory
        run: terraform destroy -auto-approve
        working-directory: infra/deployment/prod/routing

  destroy-ecs-service:
    name: Destroy all ECS service-related resources
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform on the routing directory
        run: terraform init
        working-directory: infra/deployment/prod/routing

      - name: Destroy Resources on the routing directory
        run: terraform destroy -var="ECR_APP_IMAGE=some_non_relevant_value" -auto-approve
        working-directory: infra/deployment/prod/ecs_service

  destroy-alb:
    name: Destroy all ALB-related resources
    needs: [destroy-ecs-service, destroy-routing]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform on the ALB directory
        run: terraform init
        working-directory: infra/deployment/prod/alb

      - name: Destroy Resources on the ALB directory
        run: terraform destroy -auto-approve
        working-directory: infra/deployment/prod/alb

  destroy-ecs-cluster:
    name: Destroy all ECS cluster-related resources
    needs: [destroy-alb, destroy-ecs-service]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform on the ECS directory
        run: terraform init
        working-directory: deployment/ecs

      - name: Destroy Resources on the ECS directory
        run: terraform destroy -var="ECR_APP_IMAGE=some_non_relevant_value" -auto-approve
        working-directory: deployment/ecs

  destroy-vpc:
    name: Destroy all VPC-related resources
    needs: [destroy-ecs-cluster, destroy-alb]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform on the VPC directory
        run: terraform init
        working-directory: infra/deployment/prod/vpc

      - name: Destroy Resources on the VPC directory
        run: terraform destroy -auto-approve
        working-directory: infra/deployment/prod/vpc

  destroy-ssl:
    name: Destroy all SSL certificate-related resources
    needs: [destroy-alb]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform on the SSL directory
        run: terraform init
        working-directory: infra/deployment/ssl

      - name: Destroy Resources on the SSL directory
        run: terraform destroy -auto-approve
        working-directory: infra/deployment/ssl

  destroy-hosted-zone:
    name: Destroy Route53 hosted zone
    runs-on: ubuntu-latest
    needs: [destroy-routing, destroy-ssl]
    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform on the hosted zone directory
        run: terraform init
        working-directory: deployment/hosted_zone

      - name: Destroy resources on the hosted zone directory
        run: terraform destroy -auto-approve
        working-directory: deployment/hosted_zone

  destroy-ecr:
    name: Destroy ECR-related resources
    runs-on: ubuntu-latest
    needs: [destroy-vpc, destroy-ecs-service]
    env:
      ECR_REPO_NAME: dummy-app-ecr-repository
    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Delete existing dummy app images
        run: aws ecr batch-delete-image
          --repository-name ${{ env.ECR_REPO_NAME }}
          --image-ids "$(aws ecr list-images --repository-name ${{ env.ECR_REPO_NAME }} --query 'imageIds[*]' --output json --region ${{ env.AWS_REGION }})"
          --region ${{ env.AWS_REGION }}

      - name: Initialize Terraform on the ECR directory
        run: terraform init
        working-directory: deployment/ecr

      - name: Destroy resources on the ECR directory
        run: terraform destroy -auto-approve
        working-directory: deployment/ecr

  destroy-terraform-state-bucket:
    name: Destroy Terraform state bucket
    runs-on: ubuntu-latest
    needs: [destroy-ssl, destroy-hosted-zone, destroy-ecr]
    env:
      BUCKET_NAME: dummy-app-terraform-state-bucket
    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Delete all the Terraform state files from the S3 bucket
        run: aws s3 rm s3://${{ env.BUCKET_NAME }} --recursive

      - name: Initialize Terraform
        run: terraform init
        working-directory: deployment/s3

      - name: Import the Terraform state bucket state
        run: terraform import aws_s3_bucket.dummy-app-terraform-state-bucket ${{ env.BUCKET_NAME }}
        working-directory: deployment/s3

      - name: Destroy the Terraform state bucket
        run: terraform destroy -auto-approve
        working-directory: deployment/s3
