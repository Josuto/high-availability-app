name: CI
on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-1
  TERRAFORM_VERSION: 1.5.7 # Update to your required version

jobs:
  setup-terraform-state-bucket:
    name: Setup Terraform State Bucket
    runs-on: ubuntu-latest

    # Skip this job if the commit message starts with 'ci:' or 'doc:'
    if: ${{ !startsWith(github.event.head_commit.message, 'ci:') && !startsWith(github.event.head_commit.message, 'doc:') }}

    env:
      BUCKET_NAME: dummy-app-terraform-state-bucket

    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create S3 bucket if it does not yet exist
        run: |
          if aws s3api head-bucket --bucket ${{ env.BUCKET_NAME }} 2>/dev/null; then
            echo "The Terraform state bucket already exists. Skipping creation."
          else
            echo "The Terraform state bucket does yet exist. Creating it now."
            terraform init
            terraform plan -out=tfplan.binary
            terraform apply -auto-approve tfplan.binary
          fi
        working-directory: deployment/s3

  setup-ecr:
    name: Setup ECR
    needs: setup-terraform-state-bucket
    runs-on: ubuntu-latest

    env: # required by some steps
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_REPO_NAME: dummy-app-ecr-repository

    outputs:
      ecr_repository_name: ${{ steps.get-ecr-output.outputs.ecr_repository_name }}

    steps:
      # Checkout the repository to enable the runner clone the project repo into its filesystem from the last repo
      # commit, and make the files available to other steps of the workflow
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialise Terraform on ECR directory
        run: terraform init
        working-directory: deployment/ecr

      - name: Validate IaC changes on ECR directory
        run: terraform plan -out=tfplan.binary # Save the plan as a binary file to ensure consistency between plan and apply
        working-directory: deployment/ecr

      - name: Create ECR repository if it does not yet exist
        run: terraform apply -auto-approve tfplan.binary
        working-directory: deployment/ecr

      - name: Fetch ECR repository name from Terraform output
        id: get-ecr-output # make the output available to other jobs
        run: |
          ecr_name=$(terraform output -raw ${{ env.ECR_REPO_NAME }}-url)
          echo "ecr_repository_name=$ecr_name" >> $GITHUB_OUTPUT
        working-directory: deployment/ecr
        env:
          TF_IN_AUTOMATION: true # suppresses prompts

  build-and-push-app-docker-image-to-ecr:
    name: Build and Push App Docker Image to ECR
    needs: setup-ecr
    runs-on: ubuntu-latest

    env:
      ECR_APP_IMAGE: ${{ needs.setup-ecr.outputs.ecr_repository_name }}:${{ github.sha }}

    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build the NestJS app
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate
          pnpm install
          pnpm build

      - name: Build the Docker image
        run: |
          docker build -t ${{ env.ECR_APP_IMAGE }} -f deployment/Dockerfile .

      - name: Push the Docker image to ECR
        run: |
          docker push ${{ env.ECR_APP_IMAGE }}

  deploy-app-to-ecs:
    name: Deploy App to ECS
    needs:
      - setup-ecr
      - build-and-push-app-docker-image-to-ecr
    runs-on: ubuntu-latest

    env:
      ECR_APP_IMAGE: ${{ needs.setup-ecr.outputs.ecr_repository_name }}:${{ github.sha }}

    steps:
      - name: Checkout code from the repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{env.TERRAFORM_VERSION}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Initialise Terraform on ECS directory
        run: terraform init
        working-directory: deployment/ecs

      - name: Validate IaC changes on ECS directory
        run: terraform plan -var="ECR_APP_IMAGE=${{env.ECR_APP_IMAGE}}"
        working-directory: deployment/ecs

      - name: Deploy the app to ECS
        run: terraform apply -var="ECR_APP_IMAGE=${{env.ECR_APP_IMAGE}}" -auto-approve
        working-directory: deployment/ecs
